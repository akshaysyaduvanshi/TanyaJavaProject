1 Java Hashset

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

 public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        String [] pair_left = new String[t];
        String [] pair_right = new String[t];
        
        for (int i = 0; i < t; i++) {
            pair_left[i] = s.next();
            pair_right[i] = s.next();
        }

//Write your code here
    Set<String> set = new HashSet<>();
    for (int i = 0; i < t; i++) {
        set.add(pair_left[i] + " " + pair_right[i]);
        System.out.println(set.size());
    }
    }

//////////////////////////////////////////////////////////////////////

2 java sort

import java.util.*;

class Student implements Comparable{
    private int id;
    private String fname;
    private double cgpa;
    public Student(int id, String fname, double cgpa) {
        super();
        this.id = id;
        this.fname = fname;
        this.cgpa = cgpa;
    }
    public int getId() {
        return id;
    }
    public String getFname() {
        return fname;
    }
    public double getCgpa() {
        return cgpa;
    }
    public int compareTo(Object o){
        Student s=(Student)o;
        if(cgpa==s.cgpa){
            if(fname.equals(s.fname)){
                return id-s.id;
            }else{
                return fname.compareTo(s.fname);
            }
        }else{
            if(s.cgpa-cgpa>0)
                return 1;
            else 
                return -1;
        }
    }

}


//Complete the code
public class Solution
{
   public static void main(String[] args){
      Scanner in = new Scanner(System.in);
      int testCases = Integer.parseInt(in.nextLine());

      List<Student> studentList = new ArrayList<Student>();
      while(testCases>0){
         int id = in.nextInt();
         String fname = in.next();
         double cgpa = in.nextDouble();

         Student st = new Student(id, fname, cgpa);
         studentList.add(st);

         testCases--;
      }
      Collections.sort(studentList);
         for(Student st: studentList){
         System.out.println(st.getFname());
      }
   }
}

//////////////////////////////////////////////////////////////////////
3 java 1D-Array

import java.util.*;

public class Solution {

    public static boolean canWin(int leap, int[] game) {
        return isSolvable(leap,game,0);
    }
    private static boolean isSolvable(int leap, int[] game, int i) {
    if (i >= game.length) {
        return true;
    } else if (i < 0 || game[i] == 1) {
        return false;
    }   
    game[i] = 1;
    return isSolvable(leap, game, i + leap) || 
           isSolvable(leap, game, i + 1) || 
           isSolvable(leap, game, i - 1);
    }
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int q = scan.nextInt();
        while (q-- > 0) {
            int n = scan.nextInt();
            int leap = scan.nextInt();
            
            int[] game = new int[n];
            for (int i = 0; i < n; i++) {
                game[i] = scan.nextInt();
            }

            System.out.println( (canWin(leap, game)) ? "YES" : "NO" );
        }
        scan.close();
    }
}

//////////////////////////////////////////////////////////////////////

4 java Map

//Complete this code or write your own from scratch
import java.util.*;
import java.io.*;

class Solution{
	public static void main(String []argh)
	{
		Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        sc.nextLine();
        Map<String, Integer> map = new HashMap<>(num);
        for(int i=0; i < num; i++)
        {
            String name = sc.nextLine().trim();
            int no = sc.nextInt();
            sc.nextLine();
            map.put(name, no);
        }  
        while(sc.hasNext())
        {   
            String q = sc.nextLine().trim();
            if(map.containsKey(q))
                System.out.println(q + "=" + map.get(q));
            else
                System.out.println("Not found");
        }
	}
}

//////////////////////////////////////////////////////////////////////

5 java list

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList<Integer> list = new LinkedList<>();
        for (int i = 0; i < n; i++)
        {
            int val = sc.nextInt();
            list.add(val);
        }
        int query = sc.nextInt();
        for (int i = 0; i < query; i++)
        {
            String s = sc.next();
            if (s.equals("Insert"))
            {
                int ind = sc.nextInt();
                int val = sc.nextInt();
                list.add(ind, val);
            }
             else
            {
                int ind = sc.nextInt();
                list.remove(ind);
            }
        }
        for (Integer i : list)
            System.out.print(i + " ");
    }
}

//////////////////////////////////////////////////////////////////////

6 java string

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        scan.useDelimiter("\\Z");
        String s = scan.next().trim();
        if (s.length() > 0)
        {
            String[] tokens = s.split("[!,?._'@\\s]+");
            System.out.println(tokens.length);
            for(String token : tokens)
            System.out.println(token);
        }
        else
        System.out.println(0);
        scan.close();
    }
}

//////////////////////////////////////////////////////////////////////

7 java stack

import java.util.*;
class Solution{
    
    public static void main(String []argh)
    {
        Scanner sc = new Scanner(System.in);
        while (sc.hasNext()) {
        String input=sc.next();
        Stack<Character> stacky = new Stack<>();
        for (int i = 0; i < input.length(); i++) {
            if (!stacky.isEmpty()) {
                switch(input.charAt(i)) {
                    case '}' : if (stacky.peek() == '{') {
                        stacky.pop();
                    } break;
                    case ']' : if (stacky.peek() == '[') {
                        stacky.pop();
                    } break;
                    case ')' : if (stacky.peek() == '(') {
                        stacky.pop();
                    } break;
                    default: stacky.push(input.charAt(i));
            }
            } else {
                stacky.push(input.charAt(i));
            } 
        }
     System.out.println(stacky.isEmpty());
  }
        }
        
    
}
//////////////////////////////////////////////////////////////////////

8 java bigInteger

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    BigInteger first = new BigInteger(scan.next());
    BigInteger second = new BigInteger(scan.next());
    System.out.println(first.add(second));
    System.out.println(first.multiply(second));
    }
}
//////////////////////////////////////////////////////////////////////

9 java dequeue

import java.util.*;

public class test {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        Deque<Integer> deque = new ArrayDeque<>();
        HashSet<Integer> set = new HashSet<>();
        
        int n = in.nextInt();
        int m = in.nextInt();
        int max = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++) {
            int input = in.nextInt();
            
            deque.add(input);
            set.add(input);
            
            if (deque.size() == m) {
                if (set.size() > max) max = set.size();
                int first = deque.remove();
                if (!deque.contains(first)) set.remove(first);
            }
        }
        
        System.out.println(max);
    }
}

//////////////////////////////////////////////////////////////////////



